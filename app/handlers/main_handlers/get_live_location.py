import time

from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiohttp import ClientSession
from app.states.main_states import MainStates
from app.utils.logging import log_handler
from app.config import GEO_SERVICE_URL


get_live_location_router = Router()


@get_live_location_router.message(F.location)
@log_handler
async def live_location_updates(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    """

    loc = message.location
    if loc.live_period:  # –ï—Å–ª–∏ –µ—Å—Ç—å live_period, –∑–Ω–∞—á–∏—Ç –±—ã–ª –≤–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –≥–µ–æ
        await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –Ω–∞—á–∞–ª —Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å live-–ª–æ–∫–∞—Ü–∏—é üö¥")
        await state.set_state(MainStates.get_live_location_menu)
    else:
        await message.answer(
            "‚ÑπÔ∏è –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞–∑–æ–≤—É—é —Ç–æ—á–∫—É - —ç—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ :(\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –≤—ã—à–µ)"
        )


@get_live_location_router.edited_message(F.location)
@log_handler
async def live_location_updates(message: types.Message):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    loc = message.location
    async with ClientSession() as session:
        await session.post(
            url=f"{GEO_SERVICE_URL}/coordinates",
            json={
                "user_id": message.from_user.id,
                "latitude": loc.latitude,
                "longitude": loc.longitude,
                "timestamp": message.date.isoformat()
            }
        )
